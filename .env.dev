# Default values are optimized for production to avoid having to configure
# much in production.
#
# However it should be easy to get going in development too. If you see an
# uncommented option that means it's either mandatory to set or it's being
# overwritten in development to make your life easier.

# Enable BuildKit by default:
#   https://docs.docker.com/develop/develop-images/build_enhancements
export DOCKER_BUILDKIT=1

# Rather than use the directory name, let's control the name of the project.
export COMPOSE_PROJECT_NAME=allthethings

# In development we want all services to start but in production you don't
# need the asset watchers to run since assets get built into the image.
#
# You can even choose not to run mariadb and redis in prod if you plan to use
# managed cloud services. Everything "just works", even optional depends_on!
#export COMPOSE_PROFILES=mariadb,redis,web,worker,firewall,elasticsearch,mariapersist
export COMPOSE_PROFILES=mariadb,redis,assets,web,worker,elasticsearch,kibana,mariapersist

# If you're running native Linux and your uid:gid isn't 1000:1000 you can set
# these to match your values before you build your image. You can check what
# your uid:gid is by running `id` from your terminal.
#export UID=1000
#export GID=1000

# In development avoid writing out bytecode to __pycache__ directories.
#export PYTHONDONTWRITEBYTECODE=
export PYTHONDONTWRITEBYTECODE=true

# You should generate a random string of 99+ characters for this value in prod.
# You can generate secure secrets by running: ./run flask secrets
export SECRET_KEY=insecure_key_for_dev

# Which environment is running?
# For Flask, it should be: "true" or "false"
# For Node, it should be: "development" or "production"
#export FLASK_DEBUG=false
#export NODE_ENV=production
export FLASK_DEBUG=true
export NODE_ENV=development

# In development with Docker Desktop / Linux the default value should work.
# If you have Docker running in a custom VM, put the VM's IP here instead.
#
# In production you'll want to set this to your domain name or whatever you
# plan to access in your browser, such as example.com.
#export SERVER_NAME=localhost:8000

# The bind port for gunicorn.
#
# Be warned that if you change this value you'll need to change 8000 in both
# your Dockerfile and in a few spots in docker-compose.yml due to the nature of
# how this value can be set (Docker Compose doesn't support nested ENV vars).
#export PORT=8000

# How many workers and threads should your app use? WEB_CONCURRENCY defaults
# to the server's CPU count * 2. That is a good starting point. In development
# it's a good idea to use 1 to avoid race conditions when debugging.
#export WEB_CONCURRENCY=
export WEB_CONCURRENCY=1
#export PYTHON_MAX_THREADS=1

# Do you want code reloading to work with the gunicorn app server?
#export WEB_RELOAD=false
export WEB_RELOAD=true

export MARIADB_USER=allthethings
export MARIADB_PASSWORD=password
export MARIADB_DATABASE=allthethings
#export MARIADB_HOST=mariadb
#export MARIADB_PORT=3306
#export MARIADB_PORT_FORWARD=3306

export MARIAPERSIST_USER=mariapersist
export MARIAPERSIST_PASSWORD=password
export MARIAPERSIST_DATABASE=mariapersist
#export MARIAPERSIST_HOST=mariapersist
#export MARIAPERSIST_PORT=3333
#export MARIAPERSIST_PORT_FORWARD=3333

#export AUTOSSH_USER=someuser
#export AUTOSSH_HOST=somehost
# Generate using ssh-keygen -t rsa -b 4096 -C "autossh" -f autossh_id_rsa
#export AUTOSSH_ID_RSA=/home/myuser/.ssh/autossh_id_rsa

# Connection string to Redis. This will be used to connect directly to Redis
# and for Celery. You can always split up your Redis servers later if needed.
#export REDIS_URL=redis://redis:6379/0

# You can choose between DEBUG, INFO, WARNING, ERROR, CRITICAL or FATAL.
# DEBUG tends to get noisy but it could be useful for troubleshooting.
#export CELERY_LOG_LEVEL=info

# Should Docker restart your containers if they go down in unexpected ways?
#export DOCKER_RESTART_POLICY=unless-stopped
#export DOCKER_RESTART_POLICY=no

# What health check test command do you want to run? In development, having it
# curl your web server will result in a lot of log spam, so setting it to
# /bin/true is an easy way to make the health check do basically nothing.
#export DOCKER_WEB_HEALTHCHECK_TEST=curl localhost:8000/dyn/up/
export DOCKER_WEB_HEALTHCHECK_TEST=/bin/true

# What ip:port should be published back to the Docker host for the app server?
# If you're using Docker Toolbox or a custom VM you can't use 127.0.0.1. This
# is being overwritten in dev to be compatible with more dev environments.
#
# If you have a port conflict because something else is using 8000 then you
# can either stop that process or change 8000 to be something else.
#
# Use the default in production to avoid having gunicorn directly accessible to
# the internet since it'll very likely be behind nginx or a load balancer.
#export DOCKER_WEB_PORT_FORWARD=127.0.0.1:8000
export DOCKER_WEB_PORT_FORWARD=8000

# What volume path should be used? In dev we want to volume mount everything
# so that we can develop our code without rebuilding our Docker images.
#export DOCKER_WEB_VOLUME=./public:/app/public
export DOCKER_WEB_VOLUME=.:/app

# What CPU and memory constraints will be added to your services? When left at
# 0, they will happily use as much as needed.
#export DOCKER_MARIADB_CPUS=0
#export DOCKER_MARIADB_MEMORY=0
#export DOCKER_REDIS_CPUS=0
#export DOCKER_REDIS_MEMORY=0
#export DOCKER_WEB_CPUS=0
#export DOCKER_WEB_MEMORY=0
#export DOCKER_WORKER_CPUS=0
#export DOCKER_WORKER_MEMORY=0

# To use a different ElasticSearch host:
#ELASTICSEARCH_HOST=http://elasticsearch:9200

# To access ElasticSearch/Kibana externally:
#export ELASTICSEARCH_PORT_FORWARD=9200
#export KIBANA_PORT_FORWARD=5601